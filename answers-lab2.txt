Question 1) We think that the type of variable x is uintptr_t because physical addresses cannot be deferenced sensibly in kernel.
Question 2)
page addr	points to
1   0x00400000: memory for temporary page mapping
2   0x00800000: beginning of user program data and heap 
... memory here is reserved for the user stack and program data
954 0xeebfe000: top of user stack
955 0xeec00000: user read only page info (UPAGES)
957 0xef400000: user read only page table
958 0xef800000: memory mapped I/0
960 0xf0000000: Kernbase, all of physical mem is mapped from here to last page
...
1023 0xffff0fff: last page, mapped to some of physical memory

Question 3) The bottom 12 bits of a PTE designate its permissions. Memory can
be labeled as writable or read only to the user or kernel.

Question 4) Although a 32 bit operating system could potentially allow for up
to 4 gigabytes, JOS only has the top 256 MB of its address space available.
because all of the physical pages are mapped above kernbase. 4 MB of that 256
is used for memory mapped I/O, which means that there is 252 MB available.

Question 5) There is 20 MB required for overhead. 4 MB for the Page Info
structures, 4 MB for the virtual page table, and 4 MB for the global
env structures, 4MB for temporary page mappings, and 4 MB for user page-fault
handling. 

Question 6) We transition to a higher EIP before running c code. The c code is
linked 1 MB above KERNBASE. We can do it
beause we mapped the pysical memory from [1, 4MB) with a trivial page table in
the virtual address at KERNBASE. The transition is necessary because all of
the physical memory is going to be mapped above KERNBASE, so the memory below
KERNBASE should not be used.
