#!/usr/bin/env python

import re
from gradelib import *

r = Runner(save("jos.out"),
           stop_breakpoint("readline"))

def E(s, trim=False):
    """Expand $En in s to the environment ID of the n'th user
    environment."""

    tmpl = "%x" if trim else "%08x"
    return re.sub(r"\$E([0-9]+)",
                  lambda m: tmpl % (0x1000 + int(m.group(1))-1), s)

@test(5)
def test_faultread():
    r.user_test("faultread")
    r.match(E(".$E1. user fault va 00000000 ip 008....."),
            "TRAP frame at 0xf....... from CPU .",
            "  trap 0x0000000e Page Fault",
            "  err  0x00000004.*",
            E(".$E1. free env $E1"),
            no=["I read ........ from location 0."])

@test(5)
def test_faultwrite():
    r.user_test("faultwrite")
    r.match(E(".$E1. user fault va 00000000 ip 008....."),
            "TRAP frame at 0xf....... from CPU .",
            "  trap 0x0000000e Page Fault",
            "  err  0x00000006.*",
            E(".$E1. free env $E1"))

@test(5)
def test_faultdie():
    r.user_test("faultdie")
    r.match("i faulted at va deadbeef, err 6",
            E(".$E1. exiting gracefully"),
            E(".$E1. free env $E1"))

@test(5)
def test_faultregs():
    r.user_test("faultregs")
    r.match("Registers in UTrapframe OK",
            "Registers after page-fault OK",
            no=["Registers in UTrapframe MISMATCH",
                "Registers after page-fault MISMATCH"])

@test(5)
def test_faultalloc():
    r.user_test("faultalloc")
    r.match("fault deadbeef",
            "this string was faulted in at deadbeef",
            "fault cafebffe",
            "fault cafec000",
            "this string was faulted in at cafebffe",
            E(".$E1. exiting gracefully"),
            E(".$E1. free env $E1"))

@test(5)
def test_faultallocbad():
    r.user_test("faultallocbad")
    r.match(E(".$E1. user_mem_check assertion failure for va deadbeef"),
            E(".$E1. free env $E1"))

@test(5)
def test_faultnostack():
    r.user_test("faultnostack")
    r.match(E(".$E1. user_mem_check assertion failure for va eebfff.."),
            E(".$E1. free env $E1"))

@test(5)
def test_faultbadhandler():
    r.user_test("faultbadhandler")
    r.match(E(".$E1. user_mem_check assertion failure for va (deadb|eebfe)..."),
            E(".$E1. free env $E1"))

@test(5)
def test_faultevilhandler():
    r.user_test("faultevilhandler")
    r.match(E(".$E1. user_mem_check assertion failure for va (f0100|eebfe)..."),
            E(".$E1. free env $E1"))

@test(5)
def test_forktree():
    r.user_test("forktree")
    r.match("....: I am .0.",
            "....: I am .1.",
            "....: I am .000.",
            "....: I am .100.",
            "....: I am .110.",
            "....: I am .111.",
            "....: I am .011.",
            "....: I am .001.",
            E(".$E1. exiting gracefully"),
            E(".$E2. exiting gracefully"),
            ".0000200.. exiting gracefully",
            ".0000200.. free env 0000200.")


run_tests()
